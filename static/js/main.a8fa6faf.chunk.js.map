{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,0GC2C5BC,MAvCf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAelB,wFACA,4GACA,2HACA,mEACA,2FACA,oPAEA,8EACA,8KACA,wLACA,0JACA,iEACA,kEACA,4EACA,+HACA,kHCzBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8fa6faf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      {/* <ol>\n        <li>Create a new github repo with your username and githubio. Github pages specify what you need to name your repo in order to use ghpages</li>\n        <li>Download whatever it takes so you can run the command \"npx create-react-app [insert ur name]\"</li>\n        <li>use the command npx create-react-app</li>\n        <li>Now on github create ANOTHER repo and name it what you like. Once you created the repo on github youll see \"…or push an existing repository from the command line\"\n        Paste that command into your terminal while inside the react app folder you just created with npx command.</li>\n        <li>also use the command npm install --save ghpages</li>\n        <li>Now go into the package.json file and above dependencies paste in \"homepage\": \"https://[insert ur user name].github.io/[insert the repo name]\".\n        Note the repo name is not your githubio repo that you created it's the other one that you used to get the \"...or push an existing repository...\" command</li>\n        <li>Then add these two lines  \"predeploy\": \"npm run build\" AND \"deploy\": \"gh-pages -d build\" within the scripts in package.json. This should be below dependencies</li>\n        <li>Now use the command npm run deploy</li>\n        <li>Then go to the homepage link in your browser.</li>\n        <li>Also to check if you did it right, go to github and the repo you pushed the react app code onto. In the code tab, below commits, click on the branch and you should see ghpages. </li>\n      </ol> */}\n      <p>Create a new github repo with your username and githubio.</p>\n      <p>Github pages specify what you need to name your repo in order to use ghpages.</p>\n      <p>Download whatever it takes so you can run the command \"npx create-react-app [insert ur name]</p>\n      <p>use the command npx create-react-app</p>\n      <p>Now on github create ANOTHER repo and name it what you like.</p>\n      <p>Once you created the repo on github youll see \"…or push an existing repository from the command line\"\n        Paste that command into your terminal while inside the react app folder you just created with npx command.</p>\n      <p>also use the command npm install --save ghpages</p>\n      <p>Now go into the package.json file and above dependencies paste in \"homepage\": \"https://[insert ur user name].github.io/[insert the repo name]\".</p>\n      <p>Note the repo name is not your githubio repo that you created it's the other one that you used to get the \"...or push an existing repository...\" command</p>\n      <p>hen add these two lines  \"predeploy\": \"npm run build\" AND \"deploy\": \"gh-pages -d build\" within the scripts in package.json.</p>\n      <p>This should be below dependencies.</p>\n      <p>Now use the command npm run deploy.</p>\n      <p>Then go to the homepage link in your browser.</p>\n      <p>Also to check if you did it right, go to github and the repo you pushed the react app code onto.</p>\n      <p>In the code tab, below commits, click on the branch and you should see ghpages. </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}